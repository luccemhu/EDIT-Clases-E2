color = 'grey50',
label = paste0("Máximo: ", descris$max))
histInfo = histInfo + annotate("text", x = 100000, y = 600,
color = 'grey50',
label = paste0("Media: ", descris$media))
histInfo = histInfo + annotate("text", x = 100000, y = 400,
color = 'grey50',
label = paste0("Varianza: ", descris$var))
histInfo = histInfo + annotate("text", x = 100000, y = 200,
color = 'grey50',
label = paste0("Sesgo: ", descris$asim))
histInfo
rp1 = glm(h1, data = salud,
offset = log(pob), # Exposure # Variable control
family = poisson(link = "log")) # Poisson
# displaying results
modelslmpoi = list('OLS asegurados (II)' = rl2,
'POISSON asegurados' = rp1)
modelsummary(modelslmpoi, title = "Regresiones OLS y Poisson",
stars = TRUE,
output = "kableExtra")
par(mfrow = c(1, 2))  # divide screen 1 row 2 columns
plot(salud$segu, fitted(rp1),
ylim = c(0, 365000));title(main = "Original versus Poisson")
plot(salud$segu, fitted(rl2),
ylim = c(0, 365000));title(main = "Original versus OLS \ncontrolando población")
h2 = formula(segu ~ analf15 + inde)
rp2 = glm(h2, data = salud,
offset = log(pob),
family = poisson(link = "log"))
modelsPois = list('POISSON asegurados (I)' = rp1,
'POISSON asegurados (II)' = rp2)
modelsummary(modelsPois,
title = "Regresiones Poisson anidadas",
stars = TRUE,
output = "kableExtra")
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsPois,
fmt=f,
exponentiate = T,
statistic = 'conf.int',
title = "EXP() de la Regresión Poisson para Interpretación",
stars = TRUE,
output = "kableExtra")
# simple version:
#cbind(exp(coef(rp2)),exp(confint(rp2)))
overdispersion = AER::dispersiontest(rp2, alternative = 'greater')$p.value <
0.05
underdispersion = AER::dispersiontest(rp2, alternative = 'less')$p.value <
0.05
# tabla
testResult = as.data.frame(rbind(overdispersion, underdispersion))
names(testResult) = 'Es probable?'
testResult |> kable(caption = "Test de Equidispersión") |>
kableExtra::kable_styling()
rqp = glm(h2, data = salud, offset = log(pob),
family = quasipoisson(link = "log"))
modelsPQP=list('POISSON asegurados (II)' = rp2,
'QUASIPOISSON asegurados (II)' = rqp)
modelsummary(modelsPQP, title = "Regresiones Poisson y QuasiPoisson",
stars = TRUE,
output = "kableExtra")
library(arm)
cbind(coefPoi = coef(rp2), coefQuasiPoi = coef(rqp))
cbind(sePoi = se.coef(rp2), seQuasiPoi = se.coef(rqp))
summary(rqp)$dispersion; summary(rp2)$dispersion
modelsQPexp=list('QuasiPoisson asegurados (II) exponenciado'=rqp)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsQPexp, fmt = f,
exponentiate = T,
statistic = 'conf.int',
title = "EXP() de la Regresión Quasi Poisson (II) para Interpretación",
stars = TRUE,
output = "kableExtra")
h2off = formula(segu ~ analf15 + inde + offset(log(pob)))
rbn = glm.nb(h2off, data = salud)
modelsQP_BN = list('Poisson asegurados (II)' = rp2,
'QuasiPoisson asegurados (II)' = rqp,
'Binomial Negativa asegurados (II)' = rbn)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsQP_BN, fmt = f,
exponentiate = T,
statistic = 'conf.int',
title = "EXP() de la Regresiones Poisson, Quasi Poisson  y Binomial Negativa",
stars = TRUE,
output = "kableExtra")
anova(rp2, rqp, rbn, test = "Chisq") |>
kable(caption = "Tabla ANOVA para comparar modelos") |>
kableExtra::kable_styling(full_width = FALSE)
library(ggplot2)
dotwhisker::dwplot(list(Poisson = rqp,
CuasiPoisso = rqp,
BinomialNegativa = rbn), exp = T) +
scale_y_discrete(labels = c("trabajo\nindependiente", "analfabetismo")) +
scale_color_discrete(name = "Modelos para:\nCantidad de Asegurados") +
geom_vline(xintercept = 1, colour = "grey60", linetype = 2)
sdVD = sd(salud$segu)
sdVIs = apply(salud[, c("analf15", "inde")], 2, sd)
DF = list(Poisson = sdVIs * coef(rp2)[c(2, 3)] / sdVD,
CuasiPoisson = sdVIs * coef(rqp)[c(2, 3)] / sdVD,
BinomNegativa = sdVIs * coef(rbn)[c(2, 3)] / sdVD) |>
data.frame()
DF |> kable(caption =
"Coeficientes Standarizados (ordenar vía valores absolutos)") |>
kableExtra::kable_styling(full_width = F)
library(knitr)
library(modelsummary)
h1control = formula(segu ~ analf15 + pob) # Añadimos la variable constante `pob`
rl2 = lm(h1control, data = salud)
modelslm = list('OLS asegurados (I)' = rl1,
'OLS asegurados (II)' = rl2)
modelsummary(modelslm, title = "Regresiones Lineales",
stars = TRUE, output = "kableExtra")
# Diagnósticos para el modelo OLS asegurados (II):
par(mfrow = c(2, 2))
plot(rl2, 1,caption = '');title(main = "Linealidad")
plot(rl2, 2, caption = '');title(main = "Normalidad")
plot(rl2, 3, caption = '');title(main = "Homocedasticidad")
plot(rl2, 5, caption = '');title(main = "Influyentes")
rp1 = glm(h1, data = salud,
offset = log(pob), # Exposure # Variable control
family = poisson(link = "log")) # Poisson
# displaying results
modelslmpoi = list('OLS asegurados (II)' = rl2,
'POISSON asegurados' = rp1)
modelsummary(modelslmpoi, title = "Regresiones OLS y Poisson",
stars = TRUE,
output = "kableExtra")
par(mfrow = c(1, 2))  # divide screen 1 row 2 columns
plot(salud$segu, fitted(rp1),
ylim = c(0, 365000));title(main = "Original versus Poisson")
plot(salud$segu, fitted(rl2),
ylim = c(0, 365000));title(main = "Original versus OLS \ncontrolando población")
par(mfrow = c(1, 2))  # divide screen 1 row 2 columns
plot(salud$segu, fitted(rp1),
ylim = c(0, 365000));title(main = "Original versus Poisson")
plot(salud$segu, fitted(rl2),
ylim = c(0, 365000));title(main = "Original versus OLS \ncontrolando población")
h2 = formula(segu ~ analf15 + inde)
rp2 = glm(h2, data = salud,
offset = log(pob),
family = poisson(link = "log"))
modelsPois = list('POISSON asegurados (I)' = rp1,
'POISSON asegurados (II)' = rp2)
modelsummary(modelsPois,
title = "Regresiones Poisson anidadas",
stars = TRUE,
output = "kableExtra")
h2 = formula(segu ~ analf15 + inde)
rp2 = glm(h2, data = salud,
offset = log(pob),
family = poisson(link = "log"))
modelsPois = list('POISSON asegurados (I)' = rp1,
'POISSON asegurados (II)' = rp2)
modelsummary(modelsPois,
title = "Regresiones Poisson anidadas",
stars = TRUE,
output = "kableExtra")
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsPois,
fmt=f,
exponentiate = T,
statistic = 'conf.int',
title = "EXP() de la Regresión Poisson para Interpretación",
stars = TRUE,
output = "kableExtra")
1.0166*100
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(rio) # Importamos la data:
hsb = import("https://github.com/luccemhu/EDIT-Clases-E2/raw/main/SESI%C3%93N%201/hsb_ok.xlsx")
0.5405*1.0166
1.016*100
1.016-0.5405
0.4755*100
1-1.016
0.016*100
1-0.99
0.01*100
0.01*100
1.0166*0.5405
494723*100
494723/100
4947.23*100
494723/0.5405
915306.2*100
0.5405 - 0.5494723
0.5494723*100
54.94723/ 0.5405
0.5405/100
0.005405-0.0089723
(0.5494723*100)/0.5405
393/1567
0.2507977*100
100x\|1-1.016\|
100*(1-1.016)
2.71828^(0.5405*1.016)
2.71828^(0.5405*0.99)
2.71828^(0.5405+0.99)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
LinkData='https://github.com/luccemhu/EDIT-Clases-E2/raw/main/sesion-2/pavimentando.csv'
pcv=read.csv(LinkData) #Es necesario usar este código, pues el archivo está en formato csv
seleccion=c("consejocomunal","ejecucion","uribista","priorizado")
pcv[,seleccion]=lapply(pcv[,seleccion],as.factor) #Convertimos estas variables a tipo factor
modelo=formula(apropiaciondolar~pctopo+consejocomunal+poblacioncienmil)
library(stargazer)
reg=lm(modelo,data=pcv)
stargazer(reg,type = "text",intercept.bottom = FALSE)
plot(reg, 1)
plot(reg, 3)
library(lmtest)
bptest(reg)
plot(reg, 2)
shapiro.test(reg$residuals)
library(DescTools)
VIF(reg)
plot(reg, 5)
checkReg=as.data.frame(influence.measures(reg)$is.inf)
checkReg[checkReg$cook.d & checkReg$hat,]
library(rio) # Importamos la data:
hsb = import("https://github.com/luccemhu/EDIT-Clases-E2/raw/main/sesion-1/hsb_ok.xlsx")
#str(hsb) # Tipos de datos reconocidos por R, ya que...
# Todo software lee la data a su modo y no siempre es la que se necesita.
# Por ello, debemos saber qué significa cada columna, su valor, etc.
# Para ello, es importante el codebook o diccionario de datos o metadata
# o el manual metodológico, etc. (Indicarlo en el trabajo).
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::include_url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQSlGaMI8Q8qlXI0Bp3m7BQcEh8ZLzaP7RymVtRYkg3ah1sZVlCi6-HmeKCic1RjfuH3gL_wrbMms88/pubhtml")
link="https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv"
carcel=read.csv(link, stringsAsFactors = T)
str(carcel)
knitr::include_url("https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv")
knitr::include_url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQSlGaMI8Q8qlXI0Bp3m7BQcEh8ZLzaP7RymVtRYkg3ah1sZVlCi6-HmeKCic1RjfuH3gL_wrbMms88/pubhtml") # Datos en tiempo real
# Veamos cómo los ha traido R:
link = "https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv"
carcel = read.csv(link, stringsAsFactors = T)
str(carcel)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
knitr::include_url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQSlGaMI8Q8qlXI0Bp3m7BQcEh8ZLzaP7RymVtRYkg3ah1sZVlCi6-HmeKCic1RjfuH3gL_wrbMms88/pubhtml") # Datos en tiempo real
# Veamos cómo los ha traido R:
link = "https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv"
carcel = read.csv(link, stringsAsFactors = T)
str(carcel)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
summary(carcel$semanasLibre)
table(carcel$fueArrestado)
#
h1=formula(semanasLibre~tuvoApoyoDinero+nivelEduca+vecesEnCarcel)
h2=formula(fueArrestado~tuvoApoyoDinero+nivelEduca+vecesEnCarcel)
#
rGauss=lm(h1,data=carcel)
rLogit=glm(h2,data=carcel, family = binomial)
#
models=list('Tiempo en Libertad (Gauss)'=rGauss, "Ser Arrestado (Logit)"=rLogit)
#
library(modelsummary)
modelsummary(models,
title = "Regresiones Gauss y Logit",
stars = TRUE,
output = "kableExtra")
library(survival)
# note que necesito el factor como numérico
carcel$survival=with(carcel,Surv(time = semanasLibre,event =  as.numeric(fueArrestado)))
# que es:
library(magrittr) # needed for pipe %>%
carcel%>%
rmarkdown::paged_table()
library(ggplot2)
library(ggfortify)
#aqui el generico
KM.generico = survfit(survival ~ 1, data = carcel)
###graficando
ejeX='SEMANAS\n curva cae cuando alguien es arrestado'
ejeY='Probabilidad \n(PERMANECER LIBRE)'
titulo="Curva de Sobrevivencia: permanecer libre"
autoplot(KM.generico,xlab=ejeX,ylab=ejeY, main = titulo,conf.int = F)
KM_H1=formula(survival ~ tuvoApoyoDinero)
KM.fondos = survfit(KM_H1, data = carcel)
###
ejeX='SEMANAS\n curva cae cuando alguien es arrestado'
ejeY="Prob ('seguir libre')"
titulo="Curva de Sobrevivencia: ¿Beneficia el apoyo financiero?"
autoplot(KM.fondos,xlab=ejeX,ylab=ejeY,
main = titulo,conf.int = F)  +
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
LogRank=survdiff(KM_H1, data = carcel)
# ver p-valor
LogRank$pvalue
autoplot(KM.fondos,xlab=ejeX,ylab=ejeY,
main = titulo,conf.int = T)+
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
COX_H1= formula(survival~tuvoApoyoDinero+nivelEduca+vecesEnCarcel)
#regression
rcox1 <- coxph(COX_H1,data=carcel)
modelcox=list('Riesgo - Re arrestado'=rcox1,'Riesgo- Re arrestado (exponenciado)'=rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelcox,
#fmt=f,
exponentiate = c(F,T),
statistic = 'conf.int',
title = "Regresión Cox",
stars = TRUE,
output = "kableExtra")
(apoyoDinero=abs(1-exp(coef(rcox1)[1])))
(carcelantes=abs(1-exp(coef(rcox1)[6])))
library(survminer)
ggforest(rcox1, data = carcel,main = "¿Quiénes tienen mayor riesgo de volver a ser encarcelados?")
COX_H1= formula(survival~tuvoApoyoDinero+nivelEduca+vecesEnCarcel)
COX_H2= formula(survival~tuvoApoyoDinero+vecesEnCarcel)
#regression
rcox2 <- coxph(COX_H2,data=carcel)
modelcox=list('Riesgo de Re arrestado (I)'=rcox2,'Riesgo de Re arrestado (II)'=rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelcox,
#fmt=f,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Cox (sólo Hazard Ratios)",
stars = TRUE,
output = "kableExtra")
anova(rcox2,rcox1)%>%
knitr::kable(caption = "Tabla anova para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(survival)
# note que necesito el factor como numérico
carcel$survival = with(carcel, Surv(time = semanasLibre,
event =  as.numeric(fueArrestado)))
# que es:
carcel |> rmarkdown::paged_table()
library(ggplot2)
library(ggfortify)
# aqui el generico
KM.generico = survfit(survival ~ 1, data = carcel)
# graficando:
ejeX = 'SEMANAS\n curva cae cuando alguien es arrestado'
ejeY = 'Probabilidad \n(PERMANECER LIBRE)'
titulo = "Curva de Sobrevivencia: permanecer libre"
autoplot(KM.generico, xlab = ejeX, ylab = ejeY, main = titulo, conf.int = F)
KM_H1 = formula(survival ~ tuvoApoyoDinero)
KM.fondos = survfit(KM_H1, data = carcel)
#
ejeX = 'SEMANAS\n curva cae cuando alguien es arrestado'
ejeY = "Prob ('seguir libre')"
titulo = "Curva de Sobrevivencia: ¿Beneficia el apoyo financiero?"
autoplot(KM.fondos, xlab = ejeX, ylab = ejeY,
main = titulo, conf.int = F)  +
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
View(carcel)
LogRank=survdiff(KM_H1, data = carcel)
# ver p-valor
LogRank$pvalue
LogRank = survdiff(KM_H1, data = carcel)
LogRank$pvalue # ver p-valor: 0.05011612
autoplot(KM.fondos,xlab=ejeX,ylab=ejeY,
main = titulo,conf.int = T)+
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
COX_H1 = formula(survival ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
#regression
rcox1 <- coxph(COX_H1, data = carcel)
modelcox = list('Riesgo - Re arrestado' = rcox1,
'Riesgo- Re arrestado (exponenciado)' = rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(
modelcox,
#fmt=f,
exponentiate = c(F, T),
statistic = 'conf.int',
title = "Regresión Cox",
stars = TRUE,
output = "kableExtra"
)
regression
COX_H1 = formula(survival ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
# Regression
rcox1 <- coxph(COX_H1, data = carcel)
modelcox = list('Riesgo - Re arrestado' = rcox1,
'Riesgo- Re arrestado (exponenciado)' = rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelcox,
#fmt=f,
exponentiate = c(F, T), statistic = 'conf.int',
title = "Regresión Cox", stars = TRUE, output = "kableExtra")
(carcelantes = abs(1 - exp(coef(rcox1)[6])))
library(survminer)
ggforest(rcox1, data = carcel,
main = "¿Quiénes tienen mayor riesgo de volver a ser encarcelados?")
anova(rcox2, rcox1) |>
knitr::kable(caption = "Tabla anova para comparar modelos") |>
kableExtra::kable_styling(full_width = FALSE)
knitr::include_url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQSlGaMI8Q8qlXI0Bp3m7BQcEh8ZLzaP7RymVtRYkg3ah1sZVlCi6-HmeKCic1RjfuH3gL_wrbMms88/pubhtml") # Datos en tiempo real
# Veamos cómo los ha traido R:
link = "https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv"
carcel = read.csv(link, stringsAsFactors = T)
str(carcel)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
summary(carcel$semanasLibre)
table(carcel$fueArrestado)
#
h1 = formula(semanasLibre ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
h2 = formula(fueArrestado ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
#
rGauss = lm(h1, data = carcel)
rLogit = glm(h2, data = carcel, family = binomial)
#
models = list('Tiempo en Libertad (Gauss)' = rGauss,
"Ser Arrestado (Logit)" = rLogit)
#
library(modelsummary)
modelsummary(models,
title = "Regresiones Gauss y Logit",
stars = TRUE,
output = "kableExtra")
library(survival)
# note que necesito el factor como numérico
carcel$survival = with(carcel, Surv(time = semanasLibre,
event =  as.numeric(fueArrestado)))
# que es:
#carcel |> rmarkdown::paged_table()
library(ggplot2)
library(ggfortify)
# aqui el generico
KM.generico = survfit(survival ~ 1, data = carcel)
# graficando:
ejeX = 'SEMANAS\n curva cae cuando alguien es arrestado'
ejeY = 'Probabilidad \n(PERMANECER LIBRE)'
titulo = "Curva de Sobrevivencia: permanecer libre"
autoplot(KM.generico, xlab = ejeX, ylab = ejeY, main = titulo, conf.int = F)
KM_H1 = formula(survival ~ tuvoApoyoDinero)
KM.fondos = survfit(KM_H1, data = carcel)
#
ejeX = 'SEMANAS\n curva cae cuando alguien es arrestado'
ejeY = "Prob ('seguir libre')"
titulo = "Curva de Sobrevivencia: ¿Beneficia el apoyo financiero?"
autoplot(KM.fondos, xlab = ejeX, ylab = ejeY,
main = titulo, conf.int = F)  +
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
LogRank = survdiff(KM_H1, data = carcel)
#LogRank$pvalue # P-valor: 0.05011612
autoplot(KM.fondos, xlab = ejeX, ylab = ejeY, main = titulo, conf.int = T) +
labs(colour = "Apoyo Financiero?") +
scale_color_discrete(labels = c("No", "Sí"))
COX_H1 = formula(survival ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
# Regression
rcox1 <- coxph(COX_H1, data = carcel)
modelcox = list('Riesgo - Re arrestado' = rcox1,
'Riesgo- Re arrestado (exponenciado)' = rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelcox,
#fmt=f,
exponentiate = c(F, T), statistic = 'conf.int',
title = "Regresión Cox", stars = TRUE, output = "kableExtra")
(apoyoDinero = abs(1 - exp(coef(rcox1)[1])))
(carcelantes = abs(1 - exp(coef(rcox1)[6])))
library(survminer)
ggforest(rcox1, data = carcel,
main = "¿Quiénes tienen mayor riesgo de volver a ser encarcelados?")
COX_H1 = formula(survival ~ tuvoApoyoDinero + nivelEduca + vecesEnCarcel)
COX_H2 = formula(survival ~ tuvoApoyoDinero + vecesEnCarcel)
#regression
rcox2 <- coxph(COX_H2, data = carcel)
modelcox = list('Riesgo de Re arrestado (I)' = rcox2,
'Riesgo de Re arrestado (II)' = rcox1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelcox,
#fmt=f,
exponentiate = T, statistic = 'conf.int',
title = "Regresión Cox (sólo Hazard Ratios)", stars = TRUE,
output = "kableExtra")
anova(rcox2, rcox1) |>
knitr::kable(caption = "Tabla anova para comparar modelos") |>
kableExtra::kable_styling(full_width = FALSE)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
knitr::include_url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQSlGaMI8Q8qlXI0Bp3m7BQcEh8ZLzaP7RymVtRYkg3ah1sZVlCi6-HmeKCic1RjfuH3gL_wrbMms88/pubhtml") # Datos en tiempo real
# Veamos cómo los ha traido R:
link = "https://github.com/luccemhu/EDIT-Clases-E2/raw/main/Sesion-5/carcel.csv"
carcel = read.csv(link, stringsAsFactors = T)
str(carcel)
carcel[, c(2, 3, 5, 6, 7, 8)] = lapply(carcel[, c(2, 3, 5, 6, 7, 8)], as.factor)
carcel$nivelEduca = as.ordered(carcel$nivelEduca)
#str(carcel)
