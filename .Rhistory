# ahora a numerico
idh[, -1] = lapply(idh[, -1], as.numeric)
# cambiar coma en los decimales:
demo[, -c(2, 9)] = lapply(demo[, -c(2, 9)],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -c(2, 9)] = lapply(demo[, -c(2, 9)], as.numeric)
idh[!complete.cases(idh),]
demo[!complete.cases(demo),]
##
idh[idh$Pais=='Camerún','EscolaridadDuracion']=13.1
demo[demo$Puesto==48 & !is.na(demo$Puesto),'Pais']='Panama'
##
idh=idh[complete.cases(idh),]
demo=demo[complete.cases(demo),]
# sin tildes
idh$Pais=stri_trans_general(str = idh$Pais,
id = "Latin-ASCII")
demo[,c(2,9)]=lapply(demo[,c(2,9)],
stri_trans_general,
id = "Latin-ASCII")
setdiff(demo$Pais,idh$Pais)
setdiff(idh$Pais,demo$Pais)
demo[demo$Pais=='Republica de China','Pais']='China'
demo[demo$Pais=='R. Democratica del Congo','Pais']='Republica Democratica del Congo'
idhdemo=merge(idh,demo)
head(idhdemo)
dontselect = c("Pais", "Puesto", "Puntuacion", 'Categoria')
select = setdiff(names(idhdemo), dontselect)
theData = idhdemo[, select]
# Polycor halla la relación policórica: funciona con variables categóricas y numéricas
# Cuando solo se usa con numéricas, calcula el pearson, la correlación.
library(polycor)
corMatrix=polycor::hetcor(theData)$correlations
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
View(idh)
View(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
demo = demo |> select(2:8)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
View(demo)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
names(idh)
names(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
idh[, ] = lapply(idh[, ], trimws, whitespace = "[\\h\\v]")
demo[, ] = lapply(demo[, ], trimws, whitespace = "[\\h\\v]")
str(idh)
str(demo)
# eliminar coma en los miles:
idh$PBI = gsub(',', '', idh$PBI)
# ahora a numerico
idh[, -1] = lapply(idh[, -1], as.numeric)
# cambiar coma en los decimales:
demo[, -c(2, 9)] = lapply(demo[, -c(2, 9)],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -c(2, 9)] = lapply(demo[, -c(2, 9)], as.numeric)
idh[!complete.cases(idh),]
demo[!complete.cases(demo),]
##
idh[idh$Pais=='Camerún','EscolaridadDuracion']=13.1
demo[demo$Puesto==48 & !is.na(demo$Puesto),'Pais']='Panama'
##
idh=idh[complete.cases(idh),]
demo=demo[complete.cases(demo),]
# sin tildes
idh$Pais=stri_trans_general(str = idh$Pais,
id = "Latin-ASCII")
demo[,c(2,9)]=lapply(demo[,c(2,9)],
stri_trans_general,
id = "Latin-ASCII")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
names(idh)
names(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
idh[, ] = lapply(idh[, ], trimws, whitespace = "[\\h\\v]")
demo[, ] = lapply(demo[, ], trimws, whitespace = "[\\h\\v]")
str(idh)
str(demo)
View(idh)
idh$PBI = gsub(',', '', idh$PBI)
# ahora a numerico
idh[, -1] = lapply(idh[, -1], as.numeric)
View(demo)
# eliminar coma en los miles:
idh$PBI = gsub(',', '', idh$PBI)
# ahora a numerico
idh[, -1] = lapply(idh[, -1], as.numeric)
# cambiar coma en los decimales:
demo[, -c(2, 7)] = lapply(demo[, -c(2, 7)],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -c(2, 7)] = lapply(demo[, -c(2, 7)], as.numeric)
View(demo)
View(idh)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
names(idh)
names(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
idh[, ] = lapply(idh[, ], trimws, whitespace = "[\\h\\v]")
demo[, ] = lapply(demo[, ], trimws, whitespace = "[\\h\\v]")
str(idh)
str(demo)
View(idh)
View(demo)
# cambiar coma en los decimales:
demo[, -c(2, 7)] = lapply(demo[, -c(2, 7)],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -c(2, 7)] = lapply(demo[, -c(2, 7)], as.numeric)
View(demo)
# cambiar coma en los decimales:
demo[, -1] = lapply(demo[, -1],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -1] = lapply(demo[, -1], as.numeric)
View(demo)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
names(idh)
names(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
idh[, ] = lapply(idh[, ], trimws, whitespace = "[\\h\\v]")
demo[, ] = lapply(demo[, ], trimws, whitespace = "[\\h\\v]")
str(idh)
str(demo)
View(demo)
# cambiar coma en los decimales:
demo[, -1] = lapply(demo[, -1],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -1] = lapply(demo[, -1], as.numeric)
View(idh)
idh[!complete.cases(idh),]
demo[!complete.cases(demo),]
##
idh[idh$Pais=='Camerún','EscolaridadDuracion']=13.1
demo[demo$Puesto==48 & !is.na(demo$Puesto),'Pais']='Panama'
##
idh=idh[complete.cases(idh),]
demo=demo[complete.cases(demo),]
# sin tildes
idh$Pais=stri_trans_general(str = idh$Pais,
id = "Latin-ASCII")
demo[,c(2,9)]=lapply(demo[,c(2,9)],
stri_trans_general,
id = "Latin-ASCII")
# sin tildes
idh$Pais=stri_trans_general(str = idh$Pais,
id = "Latin-ASCII")
demo[,c(2,7)]=lapply(demo[,c(2,7)],
stri_trans_general,
id = "Latin-ASCII")
setdiff(demo$Pais,idh$Pais)
setdiff(idh$Pais,demo$Pais)
demo[demo$Pais=='Republica de China','Pais']='China'
demo[demo$Pais=='R. Democratica del Congo','Pais']='Republica Democratica del Congo'
idhdemo=merge(idh,demo)
head(idhdemo)
View(idhdemo)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[6]') # Esto se actualiza
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody') # Esto se actualiza
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
names(idh)
names(demo)
# en IDH
## cambio total
newNames = c('Pais', 'EsperanzaVida', 'EscolaridadDuracion', 'EscolaridadPromedio',
'PBI')
names(idh) = newNames
# en DEMO
## Capitalizar
library(stringr)
names(demo) = str_to_title(names(demo))
library(tidyverse)
demo = demo |> select(2:8)
## sin tildes ni ñs.
library(stringi)
names(demo) = stri_trans_general(str = names(demo),
id = "Latin-ASCII")
## sin espacios
names(demo) = gsub(" ", "", names(demo))
idh[, ] = lapply(idh[, ], trimws, whitespace = "[\\h\\v]")
demo[, ] = lapply(demo[, ], trimws, whitespace = "[\\h\\v]")
str(idh)
str(demo)
# eliminar coma en los miles:
#idh$PBI = gsub(',', '', idh$PBI)
# ahora a numerico
idh[, -1] = lapply(idh[, -1], as.numeric)
# cambiar coma en los decimales:
demo[, -1] = lapply(demo[, -1],
function(x) {
gsub(",", ".", x)
})
# ahora a numerico
demo[, -1] = lapply(demo[, -1], as.numeric)
idh[!complete.cases(idh),]
demo[!complete.cases(demo),]
##
idh[idh$Pais=='Camerún','EscolaridadDuracion']=13.1
demo[demo$Puesto==48 & !is.na(demo$Puesto),'Pais']='Panama'
##
idh=idh[complete.cases(idh),]
demo=demo[complete.cases(demo),]
# sin tildes
idh$Pais=stri_trans_general(str = idh$Pais,
id = "Latin-ASCII")
demo[,c(2,7)]=lapply(demo[,c(2,7)],
stri_trans_general,
id = "Latin-ASCII")
setdiff(demo$Pais,idh$Pais)
setdiff(idh$Pais,demo$Pais)
demo[demo$Pais=='Republica de China','Pais']='China'
demo[demo$Pais=='R. Democratica del Congo','Pais']='Republica Democratica del Congo'
idhdemo=merge(idh,demo)
head(idhdemo)
dontselect = c("Pais", "Puesto", "Puntuacion", 'Categoria')
select = setdiff(names(idhdemo), dontselect)
theData = idhdemo[, select]
# Polycor halla la relación policórica: funciona con variables categóricas y numéricas
# Cuando solo se usa con numéricas, calcula el pearson, la correlación.
library(polycor)
corMatrix=polycor::hetcor(theData)$correlations
View(theData)
#########################################
#                 Mapping poverty with R
#                 Milos Popovic
#                 2023/07/25
#########################################
install.packages("remotes")
install.packages("remotes")
#########################################
#                 Mapping poverty with R
#                 Milos Popovic
#                 2023/07/25
#########################################
install.packages("remotes")
remotes::github_install(
"dickoa/rgeoboundaries"
)
install.packages("remotes")
libs <- c(
"tidyverse", "rgeoboundaries",
"sf", "terra", "rayshader"
)
installed_libs <- libs %in% rownames(
installed.packages()
if (any(installed_libs == F)) {
installed_libs <- libs %in% rownames(
installed.packages()
) if (any(installed_libs == F)) {
if(any(installed_libs == F)) {
install.packages(
libs[!installed_libs]
)
}
installed_libs <- libs %in% rownames(
installed.packages()
if(any(installed_libs == F)) {
if(any(installed_libs == F)) {
install.packages(
libs[!installed_libs]
)
}
libs <- c(
"tidyverse", "rgeoboundaries",
"sf", "terra", "rayshader"
)
installed_libs <- libs %in% rownames(
installed.packages()
)
if(any(installed_libs == F)) {
install.packages(
libs[!installed_libs]
)
}
invisible(
lapply(
libs, library,
character.only = T
)
)
install.packages("rgeoboundaries")
install.packages("remotes")
remotes::github_install(
"dickoa/rgeoboundaries"
)
install.packages("remotes")
libs <- c(
"tidyverse", "rgeoboundaries",
"sf", "terra", "rayshader"
)
installed_libs <- libs %in% rownames(
installed.packages()
)
if(any(installed_libs == F)) {
install.packages(
libs[!installed_libs]
)
}
invisible(
lapply(
libs, library,
character.only = T
)
)
remotes::github_install("dickoa/rgeoboundaries")
install.packages("remotes")
install.packages("remotes")
remotes::github_install("dickoa/rgeoboundaries")
remotes::install_gitlab("dickoa/rgeoboundaries")
remotes::install_github("wmgeolab/rgeoboundaries")
remotes::install_github("wmgeolab/rgeoboundaries")
remotes::github_install("dickoa/rgeoboundaries")
Cumulative Var 0.393 0.763 --> La varianza acumulada (suma de las varianzas acumuladas:): me quedo con 76% de informacion de reducir las 9 dimensiones a 2.
